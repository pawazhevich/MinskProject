swagger: "2.0"
info:
  version: "0.0.1"
  title: Together-registration App
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /api/v1
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /users:
    get:
      summary: Gets users
      description: Returns a list containing all users.
      parameters:
       - name: pageSize
         in: query
         description: Number of users returned
         type: integer
       - name: pageNumber
         in: query
         description: Page number
         type: integer
      responses:
        200:
          description: A list of Person
          schema:
            $ref: "#/definitions/Users"
  /users/{username}:
    get:
      summary: Gets a person
      description: Returns a single person for its username.
      parameters:
        - name: username
          in: path
          required: true
          description: The person's username
          type: string
      responses:
        200:
          description: A Person
          schema:
            $ref: "#/definitions/User"
        404:
          $ref: "#/responses/PersonDoesNotExistResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /questions:
    get:
      parameters:
       - name: pageSize
         in: query
         description: Number of questionzs returned
         type: integer
       - name: pageNumber
         in: query
         description: Page number
         type: integer
      responses:
        200:
          description: A list of questions
          schema:
            $ref: "#/definitions/Questions"
    post:
      summary: Questions
      parameters:
        - name: question
          in: body
          schema:
            $ref: "#/definitions/Questions"
      responses:
        204:
          description: Questions sucsessfully answered.
  /questions/{question}:
    get:
      parameters:
        - name: question
          in: path
          required: true
          type: string
      responses:
        200:
          description: A Question
          schema:
            $ref: "#/definitions/Question"
        404:
          $ref: "#/responses/PersonDoesNotExistResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /route:
    get:
      parameters:
        - name: route
          in: query
          required: true
          type: string
      responses:
        200:
          description: A Question
          schema:
            $ref: "#/definitions/Places"
        404:
          $ref: "#/responses/PersonDoesNotExistResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
responses:
  Standard500ErrorResponse:
    description: An unexpected error occured.
    schema:
      $ref: "#/definitions/Error"
  PersonDoesNotExistResponse:
    description: Person does not exist.
    
# complex objects have schema definitions
definitions:
  Error:
    required:
      - message
      - code
    properties:
      message:
        type: string
      code:
        type: integer

  User:
    required:
      - username
      - name
      - surname
      - sex
      - age
      - city
    properties:
      name:
        type: string
        description: The name of the person
      surname:
        type: string
        description: The surname of the person
      username:
        type: string
        description: The username of the person
      age:
        type: number
        format: integer
        description: The birthday of the person
      sex:
        type: string
        description: The country of the person
      city: 
        type: string
        description: The city of the person
  Users:
    type: array
    items:
      $ref: "#/definitions/User"
  Question:
    properties:
      answer:
        type: boolean
  Questions:
    type: array
    items:
      $ref: "#/definitions/Question"
  Place:
    properties:
      number:
        type: integer
      name:
        type: string
      cost:
        type: integer
  Places:
    type: array
    items:
      $ref: "#/definitions/Place"
    
